            int parentIndex = -1; // Parent's index in the DOM tree
            int openedTags = 0;

            for (int i = 0; i < source.Length; i++) {
                char character = source[i];

                if (character == '<') {
                    int endingIndex = Utils.SearchForClosestChar(source, '>', i + 1);

                    // Cut first < and last >
                    string tagContent = source.Substring(i + 1, endingIndex - i - 1).ToLower();

                    TagType tagType = Utils.GetTagType(tagContent);

                    if (tagType == TagType.Opening) {
                        openedTags++;

                        if (parentIndex == -1) {
                            tree.Add(new DOMElement(tagContent));
                            parentIndex = tree.Count - 1;
                        } else {
                            tree[parentIndex].Children.Add(new DOMElement(tagContent));

                        }
                    } else {
                        openedTags--;
                    }
                }
            }

            Console.WriteLine(openedTags);