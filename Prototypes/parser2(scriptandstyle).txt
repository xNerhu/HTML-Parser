using System;
using System.Collections.Generic;

namespace HTMLParser {
    public static class HTML {
        public static List<DOMElement> Parse(string source) {
            source = Utils.ClearBreakingCharacters(source);

            List<DOMElement> tree = GetDOMTree(GetTagsList(source));

            return tree;
        }

        /// <summary>
        /// Parses source code into objects
        /// </summary>
        public static List<DOMElement> GetTagsList(string source) {
            List<DOMElement> tags = new List<DOMElement>();

            string tagNameStart = null;
            int tagBackingParsingIndex = -1;

            for (int i = 0; i < source.Length; i++) {
                char character = source[i];

                if (character == '<') {
                    // Get tag's end index (>)
                    int tagEndIndex = Utils.SearchForClosestChar(source, '>', i + 1);
                    // Get tag's code
                    string tagCode = TagUtils.GetCode(source, i, tagEndIndex);
                    // Get tag's name
                    string tagName = TagUtils.GetName(tagCode);
                    // Get tag's type
                    TagType tagType = TagUtils.GetType(tagCode);
                    // Create DOMElement
                    DOMElement element = new DOMElement() {
                        TagCode = tagCode,
                        TagName = tagName,
                        Type = tagType,
                        TagStartIndex = i,
                        TagEndIndex = tagEndIndex
                    };

                    // Tags that are disabling parsing for until they are closed
                    if (element.TagName == "script" || element.TagName == "style") {
                        if (element.Type == TagType.Opening) {
                            tagNameStart = element.TagName;
                            tags.Add(element);
                        } else if (element.Type != TagType.Opening) {
                            tagNameStart = null;
                        }/* else if (tagBackingParsingIndex == -1) {
                            List<int> specialList = new List<int>();

                            for (int _i = element.TagEndIndex + 1; _i < source.Length; _i++) {
                                char specialCharacter = source[_i];

                                if (specialCharacter == '<') {
                                    int _tagEndIndex = Utils.SearchForClosestChar(source, '>', _i + 1);
                                    string _tagCode = TagUtils.GetCode(source, _i, _tagEndIndex);
                                    string _tagName = TagUtils.GetName(_tagCode);

                                    if (_tagName == element.TagName && _tagCode.StartsWith("/")) {
                                        specialList.Add(_tagEndIndex);
                                    }
                                }
                            }

                            tagBackingParsingIndex = specialList[specialList.Count - 1];
                        } else if (element.TagEndIndex == tagBackingParsingIndex) {
                            tagBackingParsingIndex = -1;
                            tagNameStart = null;
                        }        */                
                    }

                    // Get text between tags
                    if (tags.Count > 0 && tagNameStart == null) {
                        DOMElement latest = tags[tags.Count - 1];

                        int startIndex = latest.TagEndIndex + 1;
                        int endIndex = element.TagStartIndex - latest.TagEndIndex - 1;

                        string content = source.Substring(startIndex, endIndex).Trim();

                        if (content.Length > 0) {
                            DOMElement text = new DOMElement() {
                                Type = TagType.Text,
                                Content = content
                            };

                            latest.Children.Add(text);
                        }
                    }

                    // Add it to the list
                    if (tagNameStart == null) tags.Add(element);
                }
            }

            return tags;
        }

        public static List<DOMElement> GetDOMTree(List<DOMElement> tagsList) {
            List<DOMElement> tree = new List<DOMElement>();
            List<DOMElement> parentsList = new List<DOMElement>();

            for (int i = 0; i < tagsList.Count; i++) {
                DOMElement element = tagsList[i];

                // Add tag that isn't any tag's child
                // For example <html> is first tag in a document so it isn't any tag's child
                if (parentsList.Count == 0 || (element.Type == TagType.Closing && parentsList.Count == 1)) {
                    tree.Add(element);
                    // Add tag as a parent
                    // For example <html>
                    if (element.Type == TagType.Opening) {
                        parentsList.Add(element);
                    }
                } else {
                    // For every opening tag
                    // add it as latest parent's child
                    // and select it as a new parent
                    if (element.Type == TagType.Opening) {
                        // Add the child to latest parent
                        parentsList[parentsList.Count - 1].Children.Add(element);
                        // Add new parent
                        parentsList.Add(element);
                    }
                    // For every closing tag
                    // remove latest parent from parentsList
                    // add closing tag as DOMElement to tree
                    else if (element.Type == TagType.Closing) {
                        // Remove latest parent
                        parentsList.Remove(parentsList[parentsList.Count - 1]);
                        // If there is any parent left
                        if (parentsList.Count > 0) {
                            parentsList[parentsList.Count - 1].Children.Add(element);
                        }
                    }
                }
            }

            // Test output
            Console.WriteLine();
            Utils.WriteDOMTree(tree);

            return tree;
        }
    }
}
